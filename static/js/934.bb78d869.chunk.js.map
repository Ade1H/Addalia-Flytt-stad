{"version":3,"file":"static/js/934.bb78d869.chunk.js","mappings":"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","sources":["components/OmOss.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/init/init.js","../node_modules/@emailjs/browser/es/methods/send/send.js","../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport emailjs from '@emailjs/browser';\n\nconst Contact = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: '',\n  });\n\n  const [messageStatus, setMessageStatus] = useState(''); // Status for success or error messages\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    emailjs\n      .send(\n        'service_zs1rvlc', // Replace with your EmailJS service ID\n        'template_lwt6fbd', // Replace with your EmailJS template ID\n        {\n          name: formData.name,\n          email: formData.email,\n          message: formData.message,\n        },\n        'Kgzm3fkD__CsILSig' // Replace with your EmailJS user ID (or public key)\n      )\n      .then(\n        (response) => {\n          console.log('SUCCESS!', response.status, response.text);\n          setMessageStatus('Ditt meddelande har skickats framgångsrikt!');\n          setFormData({ name: '', email: '', message: '' }); // Reset form\n        },\n        (error) => {\n          console.error('FAILED...', error);\n          setMessageStatus('Något gick fel. Försök igen senare.');\n        }\n      );\n  };\n\n  return (\n    <div className=\"container my-5\">\n      <div className=\"services-section\">\n        <h3 className=\"text-center mb-4\">Våra Tjänster</h3>\n        <p>\n          Hos oss på Addalia erbjuder vi ett brett utbud av professionella tjänster för både städning och flytt. Vi är dedikerade till att underlätta våra kunders vardag genom att erbjuda pålitliga och effektiva lösningar. Oavsett om du behöver hjälp med en grundlig hemstädning eller om du ska flytta till ett nytt hem, är vi här för att hjälpa till. Här är en översikt över de tjänster vi erbjuder:\n        </p>\n\n        <h4>Städtjänster</h4>\n        <p>\n          Vi erbjuder ett brett spektrum av städtjänster som passar alla typer av bostäder och lokaler. Vi utför regelbundna hemstädningar för att hålla ditt hem fräscht, flyttstädningar för att säkerställa att din gamla bostad lämnas i perfekt skick, och storstädning inför speciella tillfällen. Våra fönsterputsningstjänster gör att dina fönster glänser, och vi erbjuder även professionell kontorsstädning för att skapa en ren och trivsam arbetsmiljö. Vid byggprojekt ser vi till att byggstädningen sker på ett effektivt sätt innan fastigheten tas i bruk, och vi har även erfarenhet av sanering och hantering av starkt nedsmutsade miljöer. Oavsett om det handlar om att tvätta möbler eller rensa trapphus, är vårt mål att skapa en ren och inbjudande miljö för dig.\n        </p>\n\n        <h4>Flyttjänster</h4>\n        <p>\n          Vid flytt hjälper vi dig att göra hela processen smidig och stressfri. Vi erbjuder hjälp med bohagsflytt, där vi tar hand om hela flytten, inklusive möbler och ömtåliga föremål. För företag erbjuder vi kontorsflytt, där vi ser till att din verksamhet kan fortsätta utan avbrott. Vi hjälper även till med packning och uppackning, vilket gör det lättare för dig att fokusera på andra delar av flytten. Vi har erfarenhet av att hantera tunga och skrymmande föremål, som pianon eller kassaskåp, och vi erbjuder även tjänster för att montera och demontera möbler. För specialgods, som konstverk eller antikviteter, erbjuder vi säker transport. Vi förvarar även dina tillhörigheter på ett tryggt sätt i magasin om du behöver förvara dem under en period, och vi kan hjälpa dig med utrensning och återvinning av gamla eller oönskade saker. Vi erbjuder dessutom intern flytt inom byggnader samt akutflytt i nödsituationer.\n        </p>\n\n        <p>\n          Vi på Addalia strävar alltid efter att ge våra kunder bästa möjliga service, oavsett om det handlar om städning eller flytt. Vår erfarna personal är här för att underlätta din vardag, så att du kan fokusera på det som verkligen betyder något för dig.\n        </p>\n      </div>\n\n      <h2 className=\"text-center mb-4\">Kontakta Oss</h2>\n      {messageStatus && (\n        <div\n          className={`alert ${\n            messageStatus.includes('framgångsrikt') ? 'alert-success' : 'alert-danger'\n          }`}\n          role=\"alert\"\n        >\n          {messageStatus}\n        </div>\n      )}\n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"name\" className=\"form-label\">\n            Namn\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"email\" className=\"form-label\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"message\" className=\"form-label\">\n            Meddelande\n          </label>\n          <textarea\n            className=\"form-control\"\n            id=\"message\"\n            name=\"message\"\n            rows=\"4\"\n            value={formData.message}\n            onChange={handleChange}\n            required\n          ></textarea>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Skicka Meddelande\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Contact;\n","export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n"],"names":["Contact","formData","setFormData","useState","name","email","message","messageStatus","setMessageStatus","handleChange","e","value","target","_jsxs","className","children","_jsx","includes","role","onSubmit","preventDefault","emailjs","then","response","console","log","status","text","error","htmlFor","type","id","onChange","required","rows","EmailJSResponseStatus","constructor","_status","arguments","length","undefined","_text","this","store","origin","blockHeadless","storageProvider","createWebStorage","localStorage","get","key","Promise","resolve","getItem","set","setItem","remove","removeItem","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","fetch","method","body","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","headlessError","isBlockedValueInParams","params","list","watchVariable","isBlockListDisabled","validateBlockListParams","Array","isArray","FormData","getValue","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","validateLimitRateParams","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","init","opts","blockList","limitRate","send","templateParams","reject","validateTemplateParams","location","pathname","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendForm","form","currentForm","document","querySelector","findHTMLForm","nodeName","validateForm","append"],"sourceRoot":""}