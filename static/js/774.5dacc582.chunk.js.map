{"version":3,"file":"static/js/774.5dacc582.chunk.js","mappings":"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","sources":["components/QuoteSection.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/init/init.js","../node_modules/@emailjs/browser/es/methods/send/send.js","../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport emailjs from \"@emailjs/browser\"; // Import EmailJS\n\nconst QuoteRequest = () => {\n  const [formData, setFormData] = useState({\n    dimensions: \"\",\n    postalCode: \"\",\n    email: \"\",\n    phone: \"\",\n    propertyType: \"\",\n    serviceType: \"\",\n   customerMessage: \"\"\n  });\n\n  const [message, setMessage] = useState(\"\");\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Validate fields\n    if (\n      !formData.dimensions ||\n      !formData.postalCode ||\n      !formData.email ||\n      !formData.phone ||\n      !formData.propertyType ||\n      !formData.serviceType\n    ) {\n      setMessage(\"Alla fält måste fyllas i.\");\n      return;\n    }\n\n    // Send email using EmailJS\n    emailjs\n      .send(\n        \"service_zs1rvlc\", // Replace with your EmailJS Service ID\n        \"template_5a6bix8\", // Replace with your EmailJS Template ID\n        {\n          dimensions: formData.dimensions,\n          postalCode: formData.postalCode,\n          email: formData.email,\n          phone: formData.phone,\n          propertyType: formData.propertyType,\n          serviceType: formData.serviceType,\n          customerMessage: formData.customerMessage\n        },\n        \"Kgzm3fkD__CsILSig\" // Replace with your EmailJS Public Key (User ID)\n      )\n      .then(\n        (response) => {\n          console.log(\"Email sent successfully!\", response);\n          setMessage(\"Offertförfrågan skickad!\");\n        },\n        (error) => {\n          console.error(\"Failed to send email:\", error);\n          setMessage(\"Något gick fel, försök igen senare.\");\n        }\n      );\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h2 className=\"text-center\">Få en kostnadsfri offert</h2>\n      <div className=\"d-flex flex-column align-items-center my-4\">\n        <p className=\"text-center mb-3\"></p>\n        <a\n  href=\"tel:+46123456789\"\n  className=\"btn btn-outline-primary btn-lg d-flex align-items-center justify-content-center px-4 shadow\"\n  style={{ borderRadius: \"30px\", fontWeight: \"bold\" }}\n  aria-label=\"Call us at 072-858 05 98\"\n>\n  <i className=\"bi bi-telephone-fill me-2\"></i> 072-858 05 98\n</a>\n\n      </div>\n\n      {message && (\n        <div\n          className={`alert ${\n            message.includes(\"fel\") ? \"alert-danger\" : \"alert-success\"\n          }`}\n          role=\"alert\"\n        >\n          {message}\n        </div>\n      )}\n      <form onSubmit={handleSubmit} className=\"shadow p-4 rounded bg-light\">\n        <div className=\"mb-3\">\n          <label htmlFor=\"dimensions\" className=\"form-label\">\n            Mått\n          </label>\n          <input\n            type=\"text\"\n            id=\"dimensions\"\n            name=\"dimensions\"\n            className=\"form-control\"\n            value={formData.dimensions}\n            onChange={handleChange}\n            placeholder=\"Ange mått (t.ex. 2x2x2m)\"\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"postalCode\" className=\"form-label\">\n            Postnummer\n          </label>\n          <input\n            type=\"text\"\n            id=\"postalCode\"\n            name=\"postalCode\"\n            className=\"form-control\"\n            value={formData.postalCode}\n            onChange={handleChange}\n            placeholder=\"Ange postnummer\"\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"email\" className=\"form-label\">\n            E-post\n          </label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            className=\"form-control\"\n            value={formData.email}\n            onChange={handleChange}\n            placeholder=\"Ange e-postadress\"\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"phone\" className=\"form-label\">\n            Telefonnummer\n          </label>\n          <input\n            type=\"tel\"\n            id=\"phone\"\n            name=\"phone\"\n            className=\"form-control\"\n            value={formData.phone}\n            onChange={handleChange}\n            placeholder=\"Ange telefonnummer\"\n            required\n            pattern=\"^[0-9]{10}$\"\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"propertyType\" className=\"form-label\">\n            Typ av Bostad\n          </label>\n          <select\n            id=\"propertyType\"\n            name=\"propertyType\"\n            className=\"form-select\"\n            value={formData.propertyType}\n            onChange={handleChange}\n            required\n          >\n            <option value=\"\">Välj typ av bostad</option>\n            <option value=\"villa\">Villa</option>\n            <option value=\"radhus\">Radhus</option>\n            <option value=\"lagenhet\">Lägenhet</option>\n            <option value=\"annat\">Annat</option>\n          </select>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"serviceType\" className=\"form-label\">\n            Typ av Tjänst\n          </label>\n          <select\n            id=\"serviceType\"\n            name=\"serviceType\"\n            className=\"form-select\"\n            value={formData.serviceType}\n            onChange={handleChange}\n            required\n          >\n            <option value=\"\">Välj typ av tjänst</option>\n            <option value=\"stad\">Städtjänster</option>\n            <option value=\"flytt\">Flyttjänster</option>\n          </select>\n\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"customerMessage\" className=\"form-label\">\n            Ditt meddelande\n          </label>\n          <textarea\n            id=\"customerMessage\"\n            name=\"customerMessage\"\n            className=\"form-control\"\n            value={formData.customerMessage}\n            onChange={handleChange}\n            placeholder=\"Skriv ett meddelande eller ange specifika önskemål här\"\n            rows=\"4\"\n          ></textarea>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary btn-lg\">\n          Skicka offert\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default QuoteRequest;\n","export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n"],"names":["QuoteRequest","formData","setFormData","useState","dimensions","postalCode","email","phone","propertyType","serviceType","customerMessage","message","setMessage","handleChange","e","name","value","target","_jsxs","className","children","_jsx","href","style","borderRadius","fontWeight","includes","role","onSubmit","preventDefault","emailjs","then","response","console","log","error","htmlFor","type","id","onChange","placeholder","required","pattern","rows","EmailJSResponseStatus","constructor","_status","arguments","length","undefined","_text","this","status","text","store","origin","blockHeadless","storageProvider","createWebStorage","localStorage","get","key","Promise","resolve","getItem","set","setItem","remove","removeItem","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","fetch","method","body","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","headlessError","isBlockedValueInParams","params","list","watchVariable","isBlockListDisabled","validateBlockListParams","Array","isArray","FormData","getValue","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","validateLimitRateParams","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","init","opts","blockList","limitRate","send","templateParams","reject","validateTemplateParams","location","pathname","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendForm","form","currentForm","document","querySelector","findHTMLForm","nodeName","validateForm","append"],"sourceRoot":""}